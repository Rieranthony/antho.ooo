import type { NextPage } from "next";
import Head from "next/head";
import { useRef } from "react";
import { SocialBar } from "../components/SocialBar";
import { YoutubeSection, Video } from "../components/VideoSection";
import { useCanvasAnimation } from "../hooks/useCanvasAnimation";

type HomeProps = {
  videos: Video[];
};

const Home: NextPage<HomeProps> = ({ videos }) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useCanvasAnimation({
    // @ts-ignore
    canvasRef,
    baseUrl: "/sequence",
    baseFileName: "face",
    initialFrameNumber: 0,
    frameCount: 43
  });

  return (
    <>
      <Head>
        <title>Anthony Riera</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto p-6 md:pt-20">
        <div className="flex flex-col justify-center items-center">
          <canvas
            ref={canvasRef}
            className="w-full aspect-square max-w-lg bg-black"
          />
          <h1 className="font-medium text-4xl mt-10 mb-4">Anthony Riera</h1>
          <SocialBar />
          <section className="w-full md:max-w-3xl md:mx-auto mt-10">
            <h3 className="mb-4">My youtube videos</h3>
            <YoutubeSection videos={videos} />
          </section>
        </div>
      </main>
    </>
  );
};

export type YTType = {
  id: {
    kind: string;
    videoId: string;
    channelId: string;
    playlistId: string;
  };
  snippet: {
    publishedAt: string;
    channelId: string;
    title: string;
    description: string;
    thumbnails: Record<
      "default" | "medium" | "high",
      {
        url: string;
        width: number;
        height: number;
      }
    >;
    channelTitle: string;
    liveBroadcastContent: string;
  };
};

export async function getStaticProps() {
  const res = await fetch(
    `https://www.googleapis.com/youtube/v3/search?key=${process.env.GOOGLE_API_KEY}&channelId=UCvjRCspZdRy1NMqyh_7BKyQ&type=video&part=snippet,id&order=date&maxResults=20`
  );
  const json = (await res.json()) as { items: YTType[] };
  const filteredVideos = json.items.map((item) => ({
    title: item.snippet.title,
    thumbnailUrl: `https://img.youtube.com/vi/${item.id.videoId}/maxresdefault.jpg`,
    url: `https://www.youtube.com/watch?v=${item.id.videoId}`
  }));

  return {
    props: {
      videos: filteredVideos
    },
    revalidate: 120
  };
}

export default Home;
